/*

 * Copyright 2016-2017 Daniel Siviter
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cito.server.ws;

import static org.jboss.shrinkwrap.api.ShrinkWrap.create;
import static org.wildfly.common.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.net.URI;

import javax.websocket.ClientEndpoint;
import javax.websocket.CloseReason;
import javax.websocket.ContainerProvider;
import javax.websocket.DeploymentException;
import javax.websocket.EndpointConfig;
import javax.websocket.Session;
import javax.websocket.WebSocketContainer;
import javax.ws.rs.core.UriBuilder;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.wildfly.swarm.spi.api.JARArchive;

/**
 * @author Daniel Siviter
 * @since v1.0 [23 Aug 2017]
 */
@RunWith(Arquillian.class)
public class KitchenSinkIT {
	@ArquillianResource
	private URI deploymenUri;

	private TestEndpoint endpoint;

	@Before
	public void before() throws DeploymentException, IOException {
		final URI uri = UriBuilder.fromUri(this.deploymenUri).path("websocket").build();
		ContainerProvider.getWebSocketContainer().connectToServer(this.endpoint = new TestEndpoint(), uri);
	}

	@Test
	public void doSomething() {
		assertTrue(this.endpoint.session.isOpen());

	}

	@After
	public void after() {
		this.endpoint.close();
	}

	// --- Static Methods ---

	protected static JARArchive createCitoWsJar() {
		return create(JARArchive.class)
				.addClass(Endpoint.class);
	}

	@Deployment
	public static WebArchive createWebArchive() {
		final File[] deps = Maven.resolver().loadPomFromFile("./pom.xml").resolve("io.cito:core").withTransitivity().asFile();
		return create(WebArchive.class)
				.addAsLibraries(deps)
				.addAsLibrary(createCitoWsJar());
	}


	// --- Inner Classes ---

	@ClientEndpoint(subprotocols = "v12.stomp", encoders = FrameEncoding.class, decoders = FrameEncoding.class)
	private class TestEndpoint extends javax.websocket.Endpoint {
		private Session session;

		@Override
		public void onOpen(Session session, EndpointConfig config) {
			this.session = session;
			System.out.println("On open!");
		}

		/* (non-Javadoc)
		 * @see javax.websocket.Endpoint#onClose(javax.websocket.Session, javax.websocket.CloseReason)
		 */
		@Override
		public void onClose(Session session, CloseReason closeReason) {
			System.out.println("On close!");
		}

		private void close() {
			if (this.session != null) {
				try {
					this.session.close();
				} catch (IOException e) {
					throw new AssertionError("Unable to close!", e);
				}
			}
		}
	}
}
